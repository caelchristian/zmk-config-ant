/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&sk {
    release-after-ms = <2000>;
    quick-release;
};

/ {
    combos { compatible = "zmk,combos"; };

    behaviors {
        to_reset: to_reset {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCE_TO_RESET";
            #binding-cells = <0>;
            bindings = <&none>, <&to_reset>;
        };

        to_boot: to_bootloader {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCE_TO_BOOT";
            #binding-cells = <0>;
            bindings = <&none>, <&to_boot>;
        };

        autoshft: autoshift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            bindings = <&shift>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
        };

        hrm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            flavor = "balanced";
            hold-trigger-on-release;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
        };

        hrm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
            flavor = "balanced";
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
        };

        capsword_caps: capsword_caps {
            compatible = "zmk,behavior-mod-morph";
            label = "CAPSWORD_CAPSLOCK";
            bindings = <&caps_word>, <&kp CAPS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        out_tog_usb: output_toggle {
            compatible = "zmk,behavior-mod-morph";
            label = "OUTPUT-TOGGLE_OUTPUT-USB";
            bindings = <&out OUT_TOG>, <&out OUT_USB>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        btn: button_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "BUTTON_LAYER";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        to_base: tto_base {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCE_TO_BASE";
            #binding-cells = <0>;
            bindings = <&none>, <&to 0>;
        };

        to_extra: to_extra {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCE_TO_EXTRA";
            #binding-cells = <0>;
            bindings = <&none>, <&to 7>;
        };

        to_tap: to_tap {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCE_TO_TAP_LAYER";
            #binding-cells = <0>;
            bindings = <&none>, <&to 8>;
        };

        to_button: to_button {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCE_TO_BUTTON";
            #binding-cells = <0>;
            bindings = <&none>, <&to 7>;
        };

        to_nav: to_nav {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPDANCE_TO_NAV";
            #binding-cells = <0>;
            bindings = <&none>, <&to 0>;
        };

        to_sym2: to_sym2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TO_SYM2";
            #binding-cells = <0>;
            bindings = <&none>, <&to 1>;
        };

        to_media: to_media {
            compatible = "zmk,behavior-tap-dance";
            label = "TO_MEDIA";
            #binding-cells = <0>;
            bindings = <&none>, <&to 6>;
        };

        to_num: to_num {
            compatible = "zmk,behavior-tap-dance";
            label = "TO_NUM";
            #binding-cells = <0>;
            bindings = <&none>, <&to 3>;
        };

        to_sym: to_sym {
            compatible = "zmk,behavior-tap-dance";
            label = "TO_SYM";
            #binding-cells = <0>;
            bindings = <&none>, <&to 3>;
        };

        to_func: to_func {
            compatible = "zmk,behavior-tap-dance";
            label = "TO_FUNC";
            #binding-cells = <0>;
            bindings = <&none>, <&to 3>;
        };

        shift_hyper: shift_hyper {
            compatible = "zmk,behavior-mod-morph";
            label = "STICKYSHIFT_STICKYHYPER";
            bindings = <&sk LEFT_SHIFT>, <&sk LA(LS(LG(LCTRL)))>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        plus_equal: plus_equal {
            compatible = "zmk,behavior-mod-morph";
            label = "PLUS_EQUAL";
            bindings = <&kp PLUS>, <&kp EQUAL>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };

        colon_semi: colon_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "COLON_SEMI";
            bindings = <&kp COLON>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT)>;
        };
    };

    macros {
        shift: with_lshift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LEFT_SHIFT>;

            label = "SHIFTKEY_PRESS_WITH_LEFT_SHIFT_MODIFIER";
        };

        as: autoshift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &autoshft MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &autoshft MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;

            label = "AUTOSHIFT_KEYPRESS";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            // -----------------------------------------------------------------------------------------
            // |   `   |  Q  |  W  |  F  |  P  |  B  |   |  J  |  L   |  U  |  Y  |  ;  |  -   |
            // |cw_caps|  A  |  R  |  S  |  T  |  G  |   |  M  |  N   |  E  |  I  |  O  |  '   |
            // | skSHFT|  Z  |  X  |  C  |  D  |  V  |   |  K  |  H   |  ,  |  .  |  /  |  \   |
            //                    | ESC | SPC | TAB |   | ENT | BKSP | DEL |

            bindings = <
&kp TAB           &kp Q  &kp W  &kp F                    &kp P      &kp B        &kp J        &kp L          &kp U           &kp Y    &kp SEMI   &kp DEL
&kp LEFT_CONTROL  &kp A  &kp R  &kp S                    &kp T      &kp G        &kp M        &kp N          &kp E           &kp I    &kp O      &mt LEFT_CONTROL SQT
&kp LEFT_ALT      &kp Z  &kp X  &kp C                    &kp D      &kp V        &kp K        &kp H          &kp COMMA       &kp DOT  &kp SLASH  &mt RIGHT_ALT MINUS
                                &mt LEFT_COMMAND ESCAPE  &kp SPACE  &lt 1 TAB    &lt 2 ENTER  &kp BACKSPACE  &kp LEFT_SHIFT
            >;
        };

        sym {
            bindings = <
&kp GRAVE  &kp EXCLAMATION  &kp AT_SIGN        &kp HASH               &kp DOLLAR      &kp PERCENT      &kp BACKSLASH  &kp N7        &kp N8        &kp N9        &kp PIPE   &kp DEL
&trans     &kp LEFT_BRACE   &kp LEFT_BRACKET   &kp LEFT_PARENTHESIS   &kp EQUAL       &kp CARET        &kp PLUS       &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp ASTRK  &trans
&trans     &kp RIGHT_BRACE  &kp RIGHT_BRACKET  &kp RIGHT_PARENTHESIS  &kp UNDERSCORE  &kp AMPERSAND    &kp MINUS      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp SLASH  &trans
                                               &trans                 &trans          &trans           &kp ENTER      &kp N0        &kp PERIOD
            >;
        };

        func+arrows {
            bindings = <
&bt BT_PRV    &kp F12  &kp F7  &kp F8  &kp F9     &kp PSCRN          &none     &kp PAGE_DOWN  &kp PG_UP     &none      &trans           &bt BT_CLR_ALL
&bt BT_NXT    &kp F11  &kp F4  &kp F5  &kp F6     &kp SLCK           &kp LEFT  &kp DOWN       &kp UP_ARROW  &kp RIGHT  &kp RIGHT_SHIFT  &none
&bt BT_SEL 0  &kp F10  &kp F1  &kp F2  &kp F3     &kp PAUSE_BREAK    &none     &none          &none         &none      &none            &none
                               &trans  &kp SPACE  &kp TAB            &trans    &trans         &trans
            >;
        };

        sym_old {
            bindings = <
&kp TILDE          &kp LEFT_BRACE  &kp AMPERSAND    &kp ASTERISK      &kp LPAR               &kp RIGHT_BRACE    &none  &to_base    &to_extra  &to_tap   &to_reset  &to_boot
&kp DOUBLE_QUOTES  &colon_semi     &kp DOLLAR       &kp PERCENT       &kp CARET              &plus_equal        &none  &kp RSHIFT  &kp RCTRL  &kp LALT  &kp LGUI   &none
&none              &kp LT          &kp EXCLAMATION  &kp AT_SIGN       &kp POUND              &kp PIPE           &none  &to_sym     &to_sym2   &kp RALT  &none      &none
                                                    &kp GREATER_THAN  &kp RIGHT_PARENTHESIS  &kp UNDERSCORE     &none  &none       &none
            >;
        };

        num+bt {
            bindings = <
&kp LEFT_BRACKET   &kp LEFT_PARENTHESIS  &kp N7  &kp N8      &kp N9  &kp RIGHT_PARENTHESIS    &none       &bt BT_DISC 0   &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 2     &bt BT_CLR_ALL
&kp RIGHT_BRACKET  &kp PLUS              &kp N4  &kp N5      &kp N6  &kp SLASH                &none       &kp LEFT_SHIFT  &kp LEFT_GUI   &kp LEFT_ALT   &kp LEFT_CONTROL  &none
&kp LEFT_ALT       &kp ASTRK             &kp N1  &kp N2      &kp N3  &kp BACKSLASH            &bt BT_PRV  &bt BT_SEL 0    &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_NXT        &bt BT_CLR
                                                 &kp PERIOD  &kp N0  &kp MINUS                &trans      &none           &none
            >;
        };

        media+mouse {
            bindings = <
&to_boot  &to_reset  &to_tap   &to_extra  &to_base   &none    &none         &none             &none              &none            &none         &none
&none     &kp LGUI   &kp LALT  &kp LCTRL  &kp LSHFT  &none    &out_tog_usb  &kp C_PREV        &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_NEXT    &none
&none     &none      &none     &to_func   &to_media  &none    &bt BT_CLR    &bt BT_SEL 0      &bt BT_SEL 1       &bt BT_SEL 2     &bt BT_SEL 3  &bt BT_SEL 4
                               &none      &none      &none    &kp C_STOP    &kp C_PLAY_PAUSE  &kp C_MUTE
            >;
        };

        button {
            bindings = <
&none  &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(LS(Z))    &kp LC(LS(Z))  &kp LC(V)  &kp LC(C)  &kp LC(X)  &kp LC(Z)  &none
&none  &kp LGUI   &kp LALT   &kp LCTRL  &kp LSHFT  &none            &none          &kp LSHFT  &kp LCTRL  &kp LALT   &kp LGUI   &none
&none  &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(LS(Z))    &kp LC(LS(Z))  &kp LC(V)  &kp LC(C)  &kp LC(X)  &kp LC(Z)  &none
                             &none      &none      &none            &none          &none      &none
            >;
        };

        extra {
            bindings = <
&kp GRAVE       &kp Q          &kp W          &kp E           &kp R            &kp T         &kp Y         &kp U           &kp I           &kp O          &kp P                  &kp MINUS
&capsword_caps  &hrm_l LGUI A  &hrm_l LALT S  &hrm_l LCTRL D  &hrm_l LSHIFT F  &kp G         &kp H         &hrm_r LSHFT J  &hrm_r LCTRL K  &hrm_r LALT L  &hrm_r LGUI SEMICOLON  &kp SQT
&shift_hyper    &btn 7 Z       &kp X          &kp C           &kp V            &kp B         &kp N         &kp M           &kp COMMA       &kp PERIOD     &btn 7 SLASH           &kp BACKSLASH
                                              &btn 6 ESC      &btn 0 SPACE     &btn 1 TAB    &btn 3 ENTER  &btn 3 BSPC     &btn 3 DELETE
            >;

            label = "qwerty_layout";
        };

        tap {
            bindings = <
&kp GRAVE       &kp Q  &kp W  &kp F    &kp P      &kp B      &kp J      &kp L     &kp U       &kp Y    &kp SEMI  &kp MINUS
&capsword_caps  &kp A  &kp R  &kp S    &kp T      &kp G      &kp M      &kp N     &kp E       &kp I    &kp O     &kp SQT
&shift_hyper    &kp Z  &kp X  &kp C    &kp D      &kp V      &kp K      &kp H     &kp COMMA   &kp DOT  &kp FSLH  &kp BACKSLASH
                              &kp ESC  &kp SPACE  &kp TAB    &kp ENTER  &kp BSPC  &kp DELETE
            >;
        };
    };
};
